{"version":3,"sources":["functions/stripe.js","components/cards/StripeCheckout.js","pages/Payment.js","images/laptop.png","functions/user.js"],"names":["createPaymentsIntent","authtoken","coupon","a","axios","post","process","couponApplied","headers","StripeCheckout","useSelector","state","user","pageState","shippingAdd","dispatch","useDispatch","history","useHistory","useState","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","cartTotal","setCartTotal","totalAfterDiscount","setTotalAfterDiscount","payable","setPayable","stripe","useStripe","elements","useElements","order","handleSubmit","e","preventDefault","confirmCardPayment","payment_method","card","getElement","CardElement","billing_details","name","email","payment","console","log","message","paymentIntent","status","id","paymentInfo","stripeResponse","createOrder","token","then","res","data","ok","undefined","window","localStorage","removeItem","type","payload","emptyUserCart","alert","handleChange","empty","useEffect","className","onSubmit","toLocaleString","cover","src","laptop","style","height","objectFit","marginBottom","actions","DollarOutlined","CheckOutlined","onChange","options","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","role","onClick","push","to","promise","loadStripe","Payment","userCart","cart","getUserCart","get","delete","applyDiscount","getUserOrders","addItemToWishlist","productId","getUserWishlist","removeProductFromWishlist","put"],"mappings":"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","file":"static/js/30.471c48f9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const createPaymentsIntent = async (authtoken, coupon) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/create-payment-integration`,\r\n    {couponApplied: coupon},\r\n    {\r\n      headers: {\r\n        authtoken,\r\n      },\r\n    }\r\n  );\r\n\r\n  export const createPaymentsIntents = async (authtoken, coupon) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/create-payment-integrations`,\r\n    {couponApplied: coupon},\r\n    {\r\n      headers: {\r\n        authtoken,\r\n      },\r\n    }\r\n  );\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CardNumberElement,\r\n  CardCvcElement,\r\n  CardExpiryElement ,CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createPaymentsIntent } from \"../../functions/stripe\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Button } from \"antd\";\r\nimport { DollarOutlined, CheckOutlined } from \"@ant-design/icons\";\r\nimport laptop from \"../../images/laptop.png\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createOrder, emptyUserCart } from \"../../functions/user\";\r\n\r\n\r\n\r\nconst StripeCheckout = () => {\r\n  const { user, coupon, pageState,shippingAdd } = useSelector((state) => ({ ...state }));\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [processing, setProcessing] = useState(\"\");\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n\r\n  const [cartTotal, setCartTotal] = useState(0);\r\n  const [totalAfterDiscount, setTotalAfterDiscount] = useState(0);\r\n  const [payable, setPayable] = useState(0);\r\n\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  \r\n\r\n  const cartStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": {\r\n          color: \"#32325d\",\r\n        },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setProcessing(true);\r\n\r\n//     if (!stripe || !elements) return;\r\n\r\n//     const  payment = stripe.confirmCardPayment(clientSecret, {\r\n//       payment_method: {\r\n//         card: elements.getElement(CardElement),\r\n//         billing_details: {\r\n//           name: e.target.name.value,\r\n//         },\r\n//       },\r\n//     });\r\n// console.log(shippingAdd)\r\n//     if (payment.error) {\r\n//       setError(`Payment Failed ${(await payment).error.message}`);\r\n//       alert.error(payment.error.message);\r\n//         <p> payment failed</p>\r\n//       setProcessing(false);\r\n//     } else {\r\n//       //here we will recieve successful payment response\r\n//       console.log((await payment).paymentIntent)\r\n//       const stripeResponse = (await payment).paymentIntent;\r\n//       //orders on the admin dashboard\r\n//       createOrder(stripeResponse, user.token).then((res) => {\r\n//         //empty cart from everywhere\r\n\r\n//         if (res.data.ok) {\r\n\r\n//           //remove cart from local storage\r\n//           if (typeof window !== undefined) localStorage.removeItem(\"cart\");\r\n//           //remove shipping address from local storage\r\n         \r\n\r\n//           //remove cart from redux\r\n//           dispatch({\r\n//             type: \"ADD_TO_CART\",\r\n//             payload: [],\r\n//           });\r\n//          // remove shipping address from redux\r\n//          dispatch({\r\n//           type: \"SHIPPING_ADDRESS\",\r\n//           payload: {},\r\n//         });\r\n//           //remove cart from database\r\n//           emptyUserCart(user.token);\r\n\r\n//           //coupon set back to false\r\n\r\n//           dispatch({\r\n//             type: \"COUPON_APPLIED\",\r\n//             payload: false,\r\n//           });\r\n//         }\r\n//       });\r\n\r\n//       console.log(payment);\r\n//       setError(null);\r\n//       setProcessing(false);\r\n//       setSucceeded(true);\r\n//     }\r\n//   };\r\nconst order = {\r\n  shippingAdd,\r\n  \r\n};\r\n\r\n\r\nconst handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  setProcessing(true);\r\n\r\n  if (!stripe || !elements) return;\r\n\r\n  const  payment = await stripe.confirmCardPayment(clientSecret, {\r\n    payment_method: {\r\n      card: elements.getElement(CardElement),\r\n      billing_details: {\r\n      \r\n        name: user.name,\r\n          email: user.email,\r\n          \r\n      },\r\n    },\r\n  });\r\nconsole.log(shippingAdd)\r\n  if (payment.error) {\r\n    setError(`Payment Failed ${(await payment).error.message}`);\r\n    console.log(error);\r\n      <p> payment failed</p>\r\n    setProcessing(false);\r\n  } else {\r\n\r\n    if (payment.paymentIntent.status === \"succeeded\") {\r\n      order.paymentInfo = {\r\n        id: payment.paymentIntent.id,\r\n        status: payment.paymentIntent.status,\r\n        stripeResponse: (await payment).paymentIntent,\r\n      }\r\n\r\n    //here we will recieve successful payment response\r\n    console.log((await payment).paymentIntent)\r\n    //const stripeResponse = (await payment).paymentIntent;\r\n    //orders on the admin dashboard\r\n    createOrder(order, user.token).then((res) => {\r\n      //empty cart from everywhere\r\n\r\n      if (res.data.ok) {\r\n\r\n        //remove cart from local storage\r\n        if (typeof window !== undefined) localStorage.removeItem(\"cart\");\r\n        if (typeof window !== undefined) localStorage.removeItem(\"shippingAddress\");\r\n        //remove shipping address from local storage\r\n       \r\n\r\n        //remove cart from redux\r\n        dispatch({\r\n          type: \"ADD_TO_CART\",\r\n          payload: [],\r\n        });\r\n       // remove shipping address from redux\r\n       dispatch({\r\n        type: \"SHIPPING_ADDRESS\",\r\n        payload: null,\r\n      });\r\n        //remove cart from database\r\n        emptyUserCart(user.token);\r\n\r\n        //coupon set back to false\r\n\r\n        dispatch({\r\n          type: \"COUPON_APPLIED\",\r\n          payload: false,\r\n        });\r\n      }\r\n    });\r\n    \r\n  }\r\n  else {\r\n    alert.error(\"There's some issue while processing payment \");\r\n  }\r\n\r\n    console.log(payment);\r\n    setError(null);\r\n    setProcessing(false);\r\n    setSucceeded(true);\r\n  }\r\n \r\n  \r\n};\r\n\r\n  const handleChange = async (e) => {\r\n    //show error if the information entered is incorrect and\r\n    //also disable the button for the pay if error found\r\n\r\n    setError(e.error ? e.error.message : \"\");\r\n    setDisabled(e.empty);\r\n  };\r\n\r\n  const handleSessionEnd = () => {\r\n    \r\n    history.push(\"/user/history\");\r\n    dispatch({\r\n      type: \"SESSION\",\r\n      payload: false,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    createPaymentsIntent(user.token, coupon).then((res) => {\r\n      console.log(res.data);\r\n      setClientSecret(res.data.clientSecret);\r\n      setCartTotal(res.data.cartTotal);\r\n      setTotalAfterDiscount(res.data.totalAfterDiscount);\r\n      setPayable(res.data.payable);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {pageState ? (\r\n        <form id=\"payment-form\" className=\"stripe-form\" onSubmit={handleSubmit}>\r\n          {!succeeded && (\r\n            <div>\r\n              {coupon && totalAfterDiscount !== undefined ? (\r\n                <p className=\"alert alert-success\">\r\n                  Coupon Applied. You Save: ₹\r\n                  {(cartTotal - totalAfterDiscount).toLocaleString(\"en-IN\")}\r\n                </p>\r\n              ) : (\r\n                <p className=\"alert alert-danger\">No Coupon Applied</p>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"text-center pb-5\">\r\n            <Card\r\n              cover={\r\n                <img\r\n                  src={laptop}\r\n                  style={{\r\n                    height: \"50px\",\r\n                    objectFit: \"cover\",\r\n                    marginBottom: \"-50px\",\r\n                  }}\r\n                />\r\n              }\r\n              actions={[\r\n                <>\r\n                  <DollarOutlined className=\"text-info mt-1\" />\r\n                  <br /> Total : ₹ {cartTotal.toLocaleString(\"en-IN\")}\r\n                </>,\r\n                <>\r\n                  <CheckOutlined className=\"text-info mt-1\" />\r\n                  <br /> payable: ₹ {(payable / 100).toLocaleString(\"en-IN\")}\r\n                </>,\r\n              ]}\r\n            />\r\n          </div>\r\n\r\n          <CardElement\r\n            id=\"card-element\"\r\n            onChange={handleChange}\r\n            options={cartStyle}\r\n          />\r\n          <button\r\n            className=\"stripe-button\"\r\n            disabled={processing || disabled || processing}\r\n          >\r\n            <span id=\"button-text\">\r\n              {processing ? <div className=\"spinner\" id=\"sinner\"></div> : \"Pay\"}\r\n            </span>\r\n          </button>\r\n          <br />\r\n          {error ? (\r\n            <div className=\"card-error text-danger\" role=\"alert\">\r\n              {error}\r\n            </div>\r\n          ) : (\r\n            \" \"\r\n          )}\r\n\r\n          <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\r\n            Payment Successful{\" \"}\r\n            <Button\r\n              type=\"link\"\r\n              className={succeeded ? \"result-message\" : \"result-message hidden\"}\r\n              onClick={handleSessionEnd}\r\n            >\r\n              Check Your Order status here\r\n            </Button>\r\n          </p>\r\n        </form>\r\n      ) : (\r\n        <div className=\"h-100 w-100\">\r\n          <p className=\"alert alert-secondary mx-auto my-auto\">\r\n            Session Expired. <Link to=\"/cart\">Try Again.</Link>\r\n          </p>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StripeCheckout;\r\n","import React from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport StripeCheckout from \"../components/cards/StripeCheckout\";\r\nimport \"../stripe.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst promise = loadStripe(process.env.REACT_APP_STRIPE_KEY);\r\n\r\nconst Payment = () => {\r\n\r\n\r\n  return (\r\n    <div className=\"container p-5 text-center\">\r\n\r\n      <h4>Complete your purchase</h4>\r\n      <p className=\"text-secondary\">\"Do not Refresh or Navigate\"</p>\r\n      <p className=\"text-secondary\">For testing purposes :- use Card number as : 4242 4242 4242 4242 </p>\r\n      <Elements stripe={promise}>\r\n        <div className=\"col-md-8 offset-md-2\">\r\n          <StripeCheckout />\r\n        </div>\r\n      </Elements>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;\r\n","export default __webpack_public_path__ + \"static/media/laptop.0ec78e2c.png\";","import axios from \"axios\";\r\n\r\nexport const userCart = async (cart, authtoken) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/user/cart`,\r\n    { cart },\r\n    {\r\n      headers: {\r\n        authtoken,\r\n      },\r\n    }\r\n  );\r\n\r\nexport const getUserCart = async (authtoken) =>\r\n  await axios.get(`${process.env.REACT_APP_API}/user/cart`, {\r\n    headers: {\r\n      authtoken,\r\n    },\r\n  });\r\n\r\nexport const emptyUserCart = async (authtoken) =>\r\n  await axios.delete(`${process.env.REACT_APP_API}/user/cart`, {\r\n    headers: {\r\n      authtoken,\r\n    },\r\n  });\r\n\r\nexport const saveUserAddress = async (authtoken, address) =>\r\n  await axios.put(\r\n    `${process.env.REACT_APP_API}/user/address`,\r\n    { address },\r\n    {\r\n      headers: {\r\n        authtoken,\r\n      },\r\n    }\r\n  );\r\n\r\nexport const applyDiscount = async (coupon, authtoken) =>\r\n  await axios.post(`${process.env.REACT_APP_API}/user/cart/coupon`, coupon, {\r\n    headers: {\r\n      authtoken,\r\n    },\r\n  });\r\n\r\nexport const createOrder = async (paymentIntent, authtoken) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/user/order`,\r\n    { paymentIntent },\r\n   \r\n    {\r\n      headers: {\r\n        authtoken,\r\n      },\r\n    },\r\n   // {address},\r\n  );\r\n\r\nexport const getUserOrders = async (authtoken) =>\r\n  await axios.get(`${process.env.REACT_APP_API}/user/orders`, {\r\n    headers: {\r\n      authtoken,\r\n    },\r\n  });\r\n\r\nexport const addItemToWishlist = async (productId, authtoken) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/user/wishlist`,\r\n    { productId },\r\n    {\r\n      headers: {\r\n        authtoken,\r\n      },\r\n    }\r\n  );\r\n\r\nexport const getUserWishlist = async (authtoken) =>\r\n  await axios.get(`${process.env.REACT_APP_API}/user/wishlist`, {\r\n    headers: {\r\n      authtoken,\r\n    },\r\n  });\r\n\r\nexport const removeProductFromWishlist = async (authtoken, productId) =>\r\n  await axios.put(\r\n    `${process.env.REACT_APP_API}/user/wishlist/${productId}`,\r\n    {},\r\n    {\r\n      headers: {\r\n        authtoken,\r\n      },\r\n    }\r\n  );\r\n"],"sourceRoot":""}